#!/bin/bash

# CDDL HEADER START
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# CDDL HEADER END

# Copyright 2023 Saso Kiselkov. All rights reserved.

# Prior to building the included dependencies, make sure the following
# packages are installed (tested on Ubuntu 18.04):
#	autoconf automake build-essential cmake gcc-multilib g++-multilib
#	mingw-w64 libgl1-mesa-dev libglu1-mesa-dev libtool libx11-dev
#	pkg-config qt5-default qt5-qmake unzip

export minimal=0
export build_ocr=0

while getopts "cdmo" opt; do
	case $opt in
	c) export do_clean=1 ;;
	d) export do_dll=1 ;;
	m)
		export minimal=1
		touch .minimal-deps
		;;
	o) export build_ocr=1 ;;
	esac
done

if [[ "$minimal" == 0 ]]; then
	rm -f .minimal-deps
fi

if [[ "$do_clean" != 1 ]]; then
	git submodule init mingw-std-threads && \
	git submodule update --merge --recursive && \
	( cd mingw-std-threads && git checkout 6c2061b7da41d6aa1b2162ff4383ec3ece864bc6 )
fi

( cd zlib && ./build_zlib_deps ) && \
    ( echo "Building libiconv ..."; cd libiconv && ./build_libiconv_deps ) && \
    ( echo "Building libclipboard ..."; \
    cd libclipboard && ./build_libclipboard_deps ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building libpng ..."; \
    cd libpng && ./build_libpng_deps ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building libjpeg ..."; \
    cd libjpeg && ./build_libjpeg_deps ) ) && \
    ( echo "Building libxml2 ..."; cd libxml2 && ./build_libxml2_deps ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building Freetype ..."; \
    cd freetype && ./build_freetype_deps ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building Cairo ..."; \
    cd cairo && ./build_cairo_deps ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building Opus ..."; \
    cd opus && ./build_opus_deps ) ) && \
    ( echo "Building OpenSSL ..."; cd ssl && ./build_ssl_deps ) && \
    ( echo "Building cURL ..."; cd curl && ./build_curl_deps ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building shapelib ..."; \
    cd shapelib && ./build_shapelib_deps ) ) && \
    ( [ $minimal -eq 1 ] || [ $build_ocr -eq 0 ] || \
    ( echo "Building OCR ..."; cd ocr && ./build_ocr_deps ) ) && \
    ( echo "Building PCRE2 ..."; cd pcre2 && ./build_pcre2_deps ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building GLEW ..."; \
    cd glew && ./build_glew_deps ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building OpenAL ..."; \
    cd openal-soft && ./build_openal ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building cglm ..."; cd cglm && ./build_cglm ) ) && \
    ( [ $minimal -eq 1 ] || ( echo "Building geographiclib ..."; \
    cd geographiclib && ./build_geographiclib ) ) && \
    ( echo "Building LZMA ..."; cd lzma/qmake && \
	if [ $(uname) = Darwin ]; then \
		if [[ "$do_clean" == 1 ]]; then
			rm -f mac-64/liblzma.a
		elif ! [ -f mac-64/liblzma.a ]; then
			./build-mac
		fi
	else
		if [[ "$do_clean" == 1 ]]; then
			rm -f -f win-64/liblzma.a linux-64/liblzma.a
		elif ( ! [ -f win-64/liblzma.a ] && [ "$minimal" -eq 0 ] ) || \
		    ! [ -f linux-64/liblzma.a ];
		    then
			./build-win-lin
		fi
	fi )
