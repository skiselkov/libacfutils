#!/bin/bash

# CDDL HEADER START
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# CDDL HEADER END

# Copyright 2025 Saso Kiselkov. All rights reserved.

# OpenSSL uses a fairly custom build infrastructure, so we can't
# use build_dep

OPENSSL="openssl-3.5.0"
case $(uname) in
    Linux)
	NCPUS=$(( $(nproc) + 1 ))
	;;
    Darwin)
	NCPUS=$(( $(sysctl -n hw.ncpu) + 1 ))
	;;
    *)
	NCPUS=8
	;;
esac


function make_macOS_fat() {
	PLATFORM="$1"
	PLATFORM_ARM="$2"

	if [[ "$do_clean" = 1 ]]; then
		return
	fi
	
	OUTDIR_ARM="$(pwd)/openssl-$PLATFORM_ARM"
	OUTDIR="$(pwd)/openssl-$PLATFORM"
	
	if [[ $(lipo -archs "$OUTDIR/lib/libcrypto.a") =~ "arm64" ]]; then
		lipo -remove arm64 "$OUTDIR/lib/libcrypto.a" -output "$OUTDIR/lib/libcrypto.a"
	fi
	
	if [[ $(lipo -archs "$OUTDIR/lib/libssl.a") =~ "arm64" ]]; then
		lipo -remove arm64 "$OUTDIR/lib/libssl.a" -output "$OUTDIR/lib/libssl.a"
	fi
	
	lipo -create "$OUTDIR_ARM/lib/libcrypto.a" "$OUTDIR/lib/libcrypto.a" \
		-output "$OUTDIR/lib/libcrypto.a"
	lipo -create "$OUTDIR_ARM/lib/libssl.a" "$OUTDIR/lib/libssl.a" \
		-output "$OUTDIR/lib/libssl.a"
}

function build_ssl() {
	PLATFORM="$1"
	CONFOPTS="$2"

	OUTDIR="$(pwd)/openssl-$PLATFORM"

	(
		if [[ "$do_clean" = 1 ]]; then
			rm -rf "$OUTDIR" "$OPENSSL"
			return
		fi
		if [[ $(uname) = "Darwin" ]]; then
			CONFOPTS="$CONFOPTS -mmacosx-version-min=11.0"
		fi
		if ! [ -f "$OUTDIR/lib/libssl.a" ]; then
			rm -rf "$OUTDIR" "$OPENSSL"
			tar xjf "${OPENSSL}.tar.bz2" || exit 1
			( cd "$OPENSSL" ;
				patch -p1 < ../atexit.patch ) || exit 1
			mkdir -p "$OUTDIR"
			cd "$OPENSSL"
			./Configure no-shared no-dso no-tests \
			    --prefix="$OUTDIR" $CONFOPTS && \
			    make clean && \
			    make -j "$NCPUS" && \
			    make -j "$NCPUS" install_sw install_ssldirs
			if ! [ -d "OUTDIR/lib64" ]; then
				( cd "$OUTDIR" ; ln -s lib64 lib )
			fi
		fi
	)
}

if [[ -z "$do_dll" ]]; then
	VIS="-fvisibility=hidden"
fi

case `uname` in
	Linux)
		build_ssl linux-64 "-fPIC -fvisibility=hidden linux-x86_64" || \
			exit 1
		if [[ "$minimal" != 1 ]] || [[ "$do_cross" = 1 ]]; then
			build_ssl win-64 \
				"--cross-compile-prefix=x86_64-w64-mingw32- $VIS mingw64"
		fi
		;;
	Darwin)
		build_ssl "mac-64" "-fvisibility=hidden darwin64-x86_64-cc"
		build_ssl "mac-arm" "-fvisibility=hidden darwin64-arm64-cc"
		make_macOS_fat "mac-64" "mac-arm"
		;;
	*)
		echo "Unsupported build platform" >&2
		exit 1
		;;
esac
